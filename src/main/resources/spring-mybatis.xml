<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- druid 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	   <!-- 基本属性 url、user、password -->
	   <property name="driverClassName" value="${druid.driverClass}" />
       <property name="url" value="${druid.jdbcUrl}" />
       <property name="username" value="${druid.username}" />
       <property name="password" value="${druid.password}" />
	
	   <!-- 配置初始化大小、最小、最大 -->
	   <property name="initialSize" value="${druid.initialSize}" />
	   <property name="minIdle" value="${druid.minIdle}" /> 
	   <property name="maxActive" value="${druid.maxActive}" />
	
	   <!-- 配置获取连接等待超时的时间 -->
	   <property name="maxWait" value="${druid.maxWait}" />
	
	   <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	   <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
	
	   <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	   <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
	
	   <property name="validationQuery" value="${druid.validationQuery}" />
	   <property name="testWhileIdle" value="${druid.testWhileIdle}" />
	   <property name="testOnBorrow" value="${druid.testOnBorrow}" />
	   <property name="testOnReturn" value="${druid.testOnReturn}" />
	
	   <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	   <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
	   <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
	
	   <!-- 配置监控统计拦截的filters -->
	   <property name="filters" value="${druid.filters}" /> 
	</bean>	
	
	<!-- myBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:/com/chujiu/manager/*/managerdao/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>

	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.chujiu.manager.*.managerdao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:aspectj-autoproxy proxy-target-class="false"/>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.chujiu.manager.*.managerservice.*Service.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	<bean id="refreshPrivilegeAspect" class="com.chujiu.aop.RefreshPrivilegeAspect" /> 
</beans>